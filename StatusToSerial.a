; Status To Serial for the PAL-1
;
; Send the status registers to the serial port, by patching the NMI code.
;
; Patch it into the NMI vector before use:
;
; 17FA - A0 <-
; 17FB - 1A <- These are new, and point to the new code.
;
; 17FE - 00
; 17FF - 1C
;
; To make it work:
; Connect the system to your serial monitor to make sure everything is sync'd and working.
; Return to the hexpad/LED mode (use the jumper) and enter AD 200 (or whereever your code is)
; With the SST switch ON, pressing Go will now output the status to the serial port and as
; steps through your code.
;
; The bad news is that this code must be in ROM, and so you will need to create a new ROM
; for your PAL-1
;
; Assemble this code, and add it to the PAL-1 ROM image at $02A0 which is ununsed on the PAL-1
; but still within the ROM space that means NMI-called code works nicely.
;
;
; Note: If you are using an EEPROM larger than a 27C64 e.g. an 27C256 then you may need to
; check the A13 line on the PAL-1 to make sure it isn't floating, as this can cause
; crashes. A14 will be at 5v, but A13 is not connected, so tie it to ground with a tiny bodge wire 
; and remember this will cause the location of the image in the
; ROM to change (if A14 is high and A13 low, the code will appear at $4000). 
; Thankfully the KIM/PAL is really good at letting you examine memory (press the AD key!) so
; you can track down where the image will end up.
;
; Note: I'm pretty sure the opcode is being displayed incorrectly. Pretty sure this will fix it:
;
; LDX #$0            --> Should be --> LDY #$0   
; LDA $00EF,X        --> Should be --> LDA ($00Ef),Y
; 
;
; Q. How do I get the assembled bytes into a ROM?
; A. The EPROM programming software I use with the TL866II Plus doesn't let you paste bytes, which is a nuisance.
; So I used an app called AutoHotKey on Windows and wrote a simple script to push the bytes into the XGPro software.
; It's effectively scripting the keyboard so you are faking manually entering all the hex codes by hand.
; The script is at the end of this assembly file. Autohotkey is free.
;
; 

CRLF    equ $1E2F
PRNST   equ $1E31
SAVE    equ $1C00
SPACE   equ $1E9E
PRTBYT  equ $1E3B
OUTCH   equ $1EA0
INITS   equ $1E88
START   equ $1C4F

POINTL  equ $FA
POINTH  equ $FB
PCL     equ $EF
PCH     equ $F0
FLAGS   equ $F1
SP      equ $F2
REGA    equ $F3
REGY    equ $F4
REGX    equ $F5


org $0000

    ; Do what NMI handler does normally, i.e. get a copy of all the regs
    ; This code is lifted from the KIM-1 monitor at location $1c00
    ; and all it does it PULL register values from the stack (placed there when the NMI
    ; happened) and then store them in zero page memory. This is something all KIM
    ; system do so the user can manual examine their contents later. Very useful.
    ; We do it too, as it makes access the values to dump later much easier.
    
    sta REGA
    PLA
    STA FLAGS
    PLA
    STA PCL
    STA POINTL
    PLA
    STA PCH
    STA POINTH
    STY REGY
    STX REGX
    TSX
    STX SP

    ; Now the new code to display the registers. We read the values from the locations
    ; we just stored them in, in the code above. Then we use the monitor routines to
    ; send them to the serial port. Really, all the hard work is done for us!


    jsr CRLF            ; Take a new line to start
    
    ; PC
    LDA #'P'
    jsr OUTCH           ; The monitor routine to output character in A
    LDA #'C'
    jsr OUTCH
    LDA #':'
    jsr OUTCH
    
    LDA PCH             ; Display the High and Low bytes of the PC
    jsr PRTBYT          ; The monitor routine to output a Byte
    LDA PCL
    jsr PRTBYT
    jsr SPACE           ; Send a space character to the serial port.
  
  
    ; OpCode            ; Read the byte the PC is counting to. It should be the opcode.
    
    LDA #'O'
    jsr OUTCH
    LDA #'P'
    jsr OUTCH
    LDA #':'
    jsr OUTCH
    LDX #$0                 ; LD A with the contents of PC - I think I messed up here. Should be LDY #$0   LDA ($00Ef),Y
    LDA $00EF,X            
    jsr PRTBYT          
    jsr SPACE
    
    ; A
   
    LDA #'A'
    jsr OUTCH
    LDA #':'
    jsr OUTCH
    LDA REGA
    jsr PRTBYT
    jsr SPACE
    
    ; X
    LDA #'X'
    jsr OUTCH
    LDA #':'
    jsr OUTCH
    LDA REGX
    jsr PRTBYT
    jsr SPACE
    
    ; Y
    LDA #'Y'
    jsr OUTCH
    LDA #':'
    jsr OUTCH
    LDA REGY
    jsr PRTBYT
    jsr SPACE
    
    ; SP
    LDA #'S'
    jsr OUTCH
    LDA #'P'
    jsr OUTCH
    LDA #':'
    jsr OUTCH
    LDA SP
    jsr PRTBYT
    jsr SPACE
    
    ; FLAGS         Display a character in upper or lower case for each bit in the status flag reg
    LDA #'F'
    jsr OUTCH
    LDA #':'
    jsr OUTCH
    
    LDX #'N'
    LDA FLAGS
    AND #$80
    BNE FALSE_N
    LDX #'n'
FALSE_N:
    TXA
    jsr OUTCH

    LDX #'V'
    LDA FLAGS
    AND #$40
    BNE FALSE_V
    LDX #'v'
FALSE_V:
    TXA
    jsr OUTCH

    LDA #'_'
    jsr OUTCH
    
    LDX #'B'
    LDA FLAGS
    AND #$10
    BNE FALSE_B
    LDX #'b'
FALSE_B:
    TXA
    jsr OUTCH
    
 LDX #'D'
    LDA FLAGS
    AND #$8
    BNE FALSE_D
    LDX #'d'
FALSE_D:
    TXA
    jsr OUTCH    
    
    LDX #'I'
    LDA FLAGS
    AND #$4
    BNE FALSE_I
    LDX #'i'
FALSE_I:
    TXA
    jsr OUTCH    
    
    LDX #'Z'
    LDA FLAGS
    AND #$2
    BNE FALSE_Z
    LDX #'z'
FALSE_Z:
    TXA
    jsr OUTCH    
    
    LDX #'C'
    LDA FLAGS
    AND #$1
    BNE FALSE_C
    LDX #'c'
FALSE_C:
    TXA
    jsr OUTCH    
    
    ; Return to where the original NMI code at $1c00 would jump to.
    
    jsr INITS
    jmp START
    
    
    
    ; end
    
    
    
    
    
    
    Autohotkey Script
    
    Use this script, start editing the byte in the EPROM editor, and press CTRL J
    
    ^j::

    
    
